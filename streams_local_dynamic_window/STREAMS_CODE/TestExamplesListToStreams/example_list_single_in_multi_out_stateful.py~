"""This module contains examples of stream_func where f_type
is 'element' and stream_func has a list of multiple input streams,
a single output stream, and the operation is stateless. These
examples must have a LIST of input streams and not a single
input stream.

The functions on static Python data structures are of the form:
    list -> element

"""
if __package__ is None:
    import sys
    from os import path
    sys.path.append( path.dirname( path.dirname( path.abspath(__file__) ) ) )

from functools import partial
from Stream import Stream, StreamArray, _no_value
from Operators import stream_func
import numpy as np

from stream_test import *


def sum_evens_and_odds(list_of_integers, state):
    sum_of_evens, sum_of_odds = state
    sum_evens_list, sum_odds_list = [], []
    for n in list_of_integers:
        if n%2:
            # n is odd
            sum_of_odds += n
            sum_odds_list.append(sum_of_odds)
        else:
            # n is even
            sum_of_evens += n
            sum_evens_list.append(sum_of_evens)
    state = (sum_of_evens, sum_of_odds)
    return ([sum_evens_list, sum_odds_list], state)
    
# Functions: list,state -> list of lists, state
# Illustrates use of NumPy
def split_by_sensor_id(list_id_value, state):
    """ The input to the stream is a list of pairs: (id, value)
    where id is the id of a sensor and value is a measurement
    generated by that sensor. The agent outputs the average
    values generated by each sensor.

    """
    # Take no action if the input is empty.
    if not list_id_value:
        avg_list = [[], []]
        next_state = state
        return (avg_list, next_state)

    # n_list is the list of the number of values read so far.
    # n_list[id] is the number of values read for the sensor with this id.
    # cum_list is the list of the sum of values read so far.
    # cum_list[id] is the sum of values read for the sensor with this id.
    n_list, cum_list = state
    avg_list, next_n_list, next_cum_list = list(), list(), list()
    list_id_value = np.array(list_id_value)
    # Assuming ids are 0 or 1
    for id in [0,1]:
        values = list_id_value[np.where(
            list_id_value[:,0]==id)][:,1]
        b = np.zeros(len(values)+1)
        b[0] = cum_list[id]
        b[1:] = values
        b = np.cumsum(b)
        n_array = np.arange(n_list[id], n_list[id]+len(b), 1)
        avg = b[1:]/np.rint(n_array[1:])
        avg_list.append(avg)
        next_n_list.append(n_array[-1])
        next_cum_list.append(b[-1])
    next_state = (next_n_list, next_cum_list)
    return (avg_list, next_state)

initial_state=([0, 0], [0.0, 0.0])
stream_split_by_sensor_id = partial(stream_func, f_type='list',
                                 f=split_by_sensor_id, num_outputs=2,
                                 state=initial_state)

stream_sums_evens_and_odds = partial(
    stream_func,
    f_type='list',
    f=sum_evens_and_odds,
    num_outputs=2,
    state=(0.0, 0.0)
    )


def test():        

    # Create stream x, and give it name 'x'.
    x = Stream('input_0')
    u = Stream('u')

    sums_of_evens, sums_of_odds = stream_sums_evens_and_odds(u)
    
    sums_of_evens.set_name('sums of evens')
    sums_of_odds.set_name('sums of odds')
    u.extend([2, 5, -8, 3, 12, -7, 14, -10])
    
    id_0_average, id_1_average = stream_split_by_sensor_id(x)

    # Give names to streams. This is helpful in reading output.
    id_0_average.set_name('average of id_0 sensors in x')
    id_1_average.set_name('average of id_1 sensors in x')

    check(sums_of_evens, [2.0, -6.0, 6.0, 20.0, 10.0, 6.0, 12.0])
    check(sums_of_odds, [5.0, 8.0, 1.0, 4.0, 5.0, 2.0])
    check(id_0_average, [2.0, 3.0, 5.0, 4.0, 4.0])
    check(id_1_average, [5.0, 3.0, 3.0, 4.0, 5.0, 6.0])

    print
    print 'Adding ([(0,2), (0,4), (1,5), (1,1), (0,9)]'
    print 'to the input stream.'
    # Add values to the tail of stream x.
    x.extend([(0,2), (0,4), (1,5), (1,1), (0,9)])

    # Print recent values of the streams
    print
    print 'recent values of input streams'
    x.print_recent()

    print
    print 'recent values of output streams'
    id_0_average.print_recent()
    id_1_average.print_recent()
    u.print_recent()
    sums_of_evens.print_recent()
    sums_of_odds.print_recent()

    print
    print
    print 'Adding ([(1,3), (1,7), (0,1), (1,9), (1,11), (0,4)])'
    print 'to the input stream.'
    # Add values to the tail of stream x.
    x.extend([(1,3), (1,7), (0,1), (1,9), (1,11), (0,4)])
    u.extend([-4, 3, 6, 1, -3])

    # Print recent values of the streams
    print 'recent values of input streams'
    print
    x.print_recent()

    print 'recent values of output streams'
    print
    id_0_average.print_recent()
    id_1_average.print_recent()
    u.print_recent()
    sums_of_evens.print_recent()
    sums_of_odds.print_recent()

    check_empty()

if __name__ == '__main__':
    test()
